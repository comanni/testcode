{"version":3,"sources":["components/Palette/Palette_mobile.js","components/upload/imageUpload.js","components/presetMenu/presetMenu_mobile.js","components/preview/Preview_mobile.js","components/slider/SizeSlider_mobile.js","App_mobile.js","serviceWorker.js","index.js"],"names":["Palette","inputs","setInputs","backgroundColor","className","style","display","flexDirection","alignItems","margin","color","onChangeComplete","console","log","hex","triangle","width","beforeUpload","file","isJpgOrPng","type","message","error","ImageUpload","selectedPhoto","useRef","useState","selectedFile","selectedFileList","state","setstate","imgUploadButton","useEffect","imgExist","document","getElementsByTagName","click","padding","fileList","customRequest","onSuccess","setTimeout","current","blob","reader","FileReader","readAsDataURL","onload","result","img64","scale","imgsize","imageToggle","setPhoto","onChange","info","nextState","status","showUploadList","ref","data","title","class","PresetMenu","setStyle","e","target","textStyle","visible","drawer","onClose","placement","mask","height","grid","column","gutter","dataSource","renderItem","item","Item","bodyStyle","overflow","textOverflow","onClick","fontSize","Text","Typography","Preview","drag","html","save","scaleChange","htmlRef","canvasRef","domtoimage","toBlob","then","window","saveAs","innerWidth","name","position","transform","transformOrigin","backgroundImage","backgroundSize","backgroundRepeat","backgroundPosition","disabled","bounds","right","bottom","code","innerRef","value","SizeSlider","size","renderHeader","extra","checked","marginLeft","marginRight","defaultValue","min","max","App","uploadVisible","mode","icon","onLeftClick","rightContent","FormOutlined","DownloadOutlined","placeholder","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.71d1bba3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {TwitterPicker} from \"react-color\"\r\n\r\nconst Palette = ({ inputs, setInputs }) => {\r\n  const {backgroundColor} = inputs\r\n  const paletteWrapper = {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    margin: \"5px\"\r\n  };\r\n  const handleChangeComplete = (color) => {\r\n    console.log(color)\r\n    setInputs({\r\n      ...inputs,\r\n      backgroundColor: color.hex\r\n    });\r\n\r\n  }\r\n  return (\r\n    <div className=\"paletteWrapper\" style={paletteWrapper}>\r\n        <TwitterPicker color={backgroundColor} onChangeComplete={handleChangeComplete} triangle=\"hide\" width=\"100%\"></TwitterPicker>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Palette;","import React from 'react';\r\nimport { Button, Upload, message} from 'antd';\r\nimport { useState, useRef, useEffect } from 'react';\r\n\r\n\r\n\r\nfunction beforeUpload(file) {\r\n  const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\r\n  if (!isJpgOrPng) {\r\n    message.error('JPG와 PNG만 가능합니다')\r\n  }  \r\n  return isJpgOrPng\r\n}\r\n\r\nfunction setPhoto(blob, setInputs, inputs, selectedPhoto) {\r\n    let reader = new FileReader();\r\n    reader.readAsDataURL(blob);\r\n    reader.onload = () => {\r\n      selectedPhoto.current = reader.result;\r\n      setInputs({\r\n        ...inputs,\r\n        img64: reader.result,\r\n        scale: 60,\r\n        imgsize: 100,\r\n        imageToggle: true\r\n      });\r\n    };\r\n\r\n}\r\nconst ImageUpload = ({inputs, setInputs}) => {\r\n  const selectedPhoto = useRef(null);\r\n  const dummyRequest = ({ file, onSuccess }) => {\r\n    setTimeout(() => {\r\n        onSuccess(\"ok\");\r\n      }, 0);\r\n      selectedPhoto.current = file;\r\n      setPhoto(selectedPhoto.current, setInputs, inputs, selectedPhoto)\r\n    };\r\n  const [state, setstate] = useState({\r\n      selectedFile: null,\r\n      selectedFileList: []\r\n  })\r\n  const imgUploadButton = useRef()\r\n    const onChange = info => {\r\n        const nextState = {};\r\n        switch (info.file.status) {\r\n          case \"uploading\":\r\n            nextState.selectedFileList = [info.file];\r\n            break;\r\n          case \"done\":\r\n            nextState.selectedFile = info.file;\r\n            nextState.selectedFileList = [info.file];\r\n            break;\r\n    \r\n          default:\r\n            // error or removed\r\n            nextState.selectedFile = null;\r\n            nextState.selectedFileList = [];\r\n        }\r\n        setstate(() => nextState);\r\n\r\n      };\r\n      useEffect(() => {\r\n        if (inputs.imgExist) {\r\n            let i=document.getElementsByTagName('input')\r\n            i[2].click()\r\n        }\r\n\r\n      }, [inputs.imgExist]);\r\n\r\nreturn (\r\n    <div style={{padding:\"10px\"}}>\r\n\r\n        <Upload\r\n          fileList={state.selectedFileList}\r\n          customRequest={dummyRequest}\r\n          onChange={onChange}\r\n          showUploadList={false}\r\n          beforeUpload={beforeUpload}\r\n        >\r\n          <Button ref={imgUploadButton}>Choose File</Button>\r\n        </Upload>\r\n\r\n    </div>\r\n)\r\n\r\n}\r\n\r\nexport default ImageUpload","import { Drawer, List, Card } from 'antd';\r\nimport React from 'react';\r\nconst data = [\r\n    {\r\n        title: '롱쉐도우 : 녹색',\r\n        class: 'textStyle_1'\r\n    },\r\n    {\r\n        title: '아웃라인',\r\n        class: 'textStyle_2'\r\n    },\r\n    {\r\n        title: '카툰풍 글씨',\r\n        class: 'textStyle_3'\r\n    },\r\n    {\r\n        title: '희미한 그림자',\r\n        class: 'textStyle_4'\r\n    },\r\n    {\r\n        title: '롱쉐도우 : 블랙',\r\n        class: 'textStyle_5'\r\n    },\r\n    {\r\n        title: '흰색 투명',\r\n        class: 'textStyle_6'\r\n    },\r\n    {\r\n        title: '인터뷰 형',\r\n        class: 'textStyle_7'\r\n    },\r\n    {\r\n        title: '스트라이프 그라데이션',\r\n        class: 'textStyle_8'\r\n    }\r\n]\r\n\r\nconst PresetMenu = ({inputs, setInputs}) => {\r\n    const closeDrawer = e => {\r\n        setInputs({\r\n            ...inputs,\r\n            drawer: false\r\n        })\r\n    }\r\n    const setStyle = e => {\r\n        console.log(e.target.className)\r\n        setInputs({\r\n            ...inputs,\r\n            textStyle: e.target.className\r\n        })\r\n    }\r\n    return (\r\n        <>\r\n            <Drawer title=\"프리셋 선택\" visible={inputs.drawer} onClose={closeDrawer} placement=\"bottom\" mask={false} height=\"350\">\r\n                <List grid={{column: 2, gutter: 16}} dataSource={data} renderItem={item => (\r\n                    <List.Item>\r\n                        <Card title={item.title} bodyStyle={{padding:'6px'}}><div style={{overflow:'hidden', height:'60px', textOverflow:'ellipsis'}}><span className={item.class} onClick={setStyle} style={{fontSize: '2.5rem'}}>안녕하세요</span></div></Card>\r\n                    </List.Item>)} />\r\n                \r\n            </Drawer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PresetMenu\r\n\r\n// https://codepen.io/ingthorsson/pen/QVRVZP 이중 스트로크","import React, { useEffect, useRef } from \"react\";\r\nimport ContentEditable from \"react-contenteditable\";\r\nimport Draggable from \"react-draggable\";\r\nimport domtoimage from \"dom-to-image\";\r\nimport { saveAs } from \"file-saver\";\r\nimport { Typography } from \"antd\";\r\nconst { Text } = Typography;\r\n\r\nconst Preview = ({ inputs, setInputs }) => {\r\n  const {\r\n    scale,\r\n    drag,\r\n    html,\r\n    img64,\r\n    imgsize,\r\n    backgroundColor,\r\n    drawer,\r\n    textStyle,\r\n    save,\r\n    scaleChange,\r\n    imageToggle\r\n  } = inputs;\r\n\r\n  const htmlRef = useRef(html);\r\n  const canvasRef = useRef();\r\n\r\n  const handleText = e => {\r\n    setInputs({\r\n      ...inputs,\r\n      html: e.target.value\r\n    });\r\n  };\r\n  useEffect(() => {\r\n\r\n    if (save) {\r\n      setInputs({\r\n        ...inputs,\r\n        scale: `scale(1)`,\r\n        scaleChange: true\r\n      });\r\n\r\n      return;\r\n    }\r\n  }, [html, drawer, drag, save]);\r\n\r\n  useEffect(() => {\r\n    if (scaleChange) {\r\n\r\n      setTimeout(\r\n        domtoimage.toBlob(canvasRef.current).then(function(blob) {\r\n          window.saveAs(blob, \"Illywa_thumnail.png\");\r\n          setInputs({\r\n            ...inputs,\r\n            scale: `scale(${window.innerWidth / 1280})`,\r\n            scaleChange: false,\r\n            save: false\r\n          });\r\n        }),\r\n        1000\r\n      );\r\n\r\n      return;\r\n    }\r\n  }, [scaleChange]);\r\n\r\n  return (\r\n    <div\r\n      className=\"Wrapper\"\r\n      style={{\r\n        display: \"block\",\r\n        height: `${(window.innerWidth * 720) / 1280}px`\r\n      }}\r\n    >\r\n      <div\r\n        className=\"PreviewScreen\"\r\n        name=\"canvas\"\r\n        ref={canvasRef}\r\n        style={{\r\n          width: \"1280px\",\r\n          height: \"720px\",\r\n          backgroundColor: backgroundColor,\r\n          position: \"relative\",\r\n          overflow: \"hidden\",\r\n          transform: scale,\r\n          transformOrigin: \"top left\"\r\n        }}\r\n      >\r\n        {imageToggle !== false ? (\r\n          <div\r\n            style={{\r\n              width: `1280px`,\r\n              height: `720px`,\r\n              backgroundImage: `url(${img64})`,\r\n              backgroundSize: `${imgsize * 0.01 * 1280}px`,\r\n              backgroundRepeat: \"no-repeat\",\r\n              backgroundPosition: \"center\",\r\n              // left: \"50%\",\r\n              // top: \"50%\",\r\n\r\n              position: \"absolute\"\r\n            }}\r\n          ></div>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        <Draggable disabled={drag} bounds=\"parent\">\r\n          <div\r\n            className=\"test\"\r\n            style={{\r\n              right: \"35px\",\r\n              bottom: \"10px\",\r\n              position: \"absolute\"\r\n            }}\r\n          >\r\n            <div style={{ display: drag ? \"block\" : \"none\" }}>\r\n              <Text code>글씨 수정 가능</Text>\r\n            </div>\r\n            <ContentEditable\r\n              className={`TextArea ${textStyle !== \"\" ? textStyle : \"\"}`}\r\n              innerRef={htmlRef}\r\n              disabled={true}\r\n              html={html}\r\n              onChange={handleText}\r\n            />\r\n          </div>\r\n        </Draggable>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Preview;\r\n","import { WingBlank, Slider, List, Switch } from \"antd-mobile\";\r\nimport React, { useEffect} from \"react\";\r\n\r\nconst SizeSlider = ({ inputs, setInputs }) => {\r\n  const {\r\n    imageToggle,\r\n    imgExist\r\n  } = inputs;\r\n\r\n  const handleImageSize = e => {\r\n    setInputs({\r\n      ...inputs,\r\n      imgsize: e\r\n    });\r\n  };\r\n  useEffect(() => {\r\n\r\n  }, [imageToggle]);\r\n  return (\r\n    <>\r\n      <WingBlank size=\"md\">\r\n        <List\r\n          renderHeader={() => \"이미지 사이즈 조절\"}\r\n          className=\"my-list\"\r\n        ></List>\r\n        <List.Item\r\n          extra={\r\n            <Switch\r\n              checked={imageToggle}\r\n              onChange={() => {\r\n                if (!imgExist && !imageToggle) {\r\n                  console.log(imgExist);\r\n                  setInputs({\r\n                    ...inputs,\r\n                    imageToggle: !imageToggle,\r\n                    imgExist: true\r\n                  });\r\n                } else {\r\n                  setInputs({\r\n                    ...inputs,\r\n                    imageToggle: !imageToggle\r\n                  });\r\n                }\r\n              }}\r\n            />\r\n          }\r\n        >\r\n          이미지 사용\r\n        </List.Item>\r\n        <List.Item>\r\n          <Slider\r\n            style={{ marginLeft: 30, marginRight: 30 }}\r\n            defaultValue={100}\r\n            min={0}\r\n            max={200}\r\n            onChange={handleImageSize}\r\n          />\r\n        </List.Item>\r\n      </WingBlank>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SizeSlider;\r\n","import { FormOutlined, DownloadOutlined } from \"@ant-design/icons\";\nimport React, { useState } from \"react\";\nimport 'antd-mobile/dist/antd-mobile.css';\nimport \"./App.css\";\nimport Palette from \"./components/Palette/Palette_mobile\";\nimport ImageUpload from \"./components/upload/imageUpload\";\nimport { NavBar, Icon, Flex, WingBlank, WhiteSpace, InputItem } from 'antd-mobile';\nimport PresetMenu from \"./components/presetMenu/presetMenu_mobile\";\nimport Preview from \"./components/preview/Preview_mobile\";\nimport SizeSlider from \"./components/slider/SizeSlider_mobile\";\n\n// antd 비구조화 할당\n\nfunction App() {\n  const [inputs, setInputs] = useState({\n    uploadVisible: false,\n    scale: `scale(${window.innerWidth / 1280})`,\n    drag: false,\n    html: \"썸네일 제작기\",\n    img64: \"\",\n    imgsize: 100,\n    imageToggle: false,\n    backgroundColor: \"#697689\",\n    drawer: false,\n    textStyle: \"textStyle_Default\",\n    save: false,\n    scaleChange: false,\n    imgExist: false\n  });\n\n  const {\n    html,\n    drawer,\n    save,\n  } = inputs;\n\n  const handleDrawer = e => {\n\n    setInputs({\n      ...inputs,\n      drawer: !drawer\n    });\n  };\n\n  const handleSave = e => {\n\n    setInputs({\n      ...inputs,\n      save: !save\n    });\n  };\n\n  const handleText = e => {\n    console.log(e)\n    setInputs({\n      ...inputs,\n      html: e\n    });\n  };\n\n  return (\n    <>\n\n\n\n  <div>\n    <NavBar\n      mode=\"light\"\n      icon={<Icon type=\"left\" />}\n      onLeftClick={() => console.log('onLeftClick')}\n      rightContent={[\n        <FormOutlined style={{ marginRight: '24px' }} onClick={handleDrawer}/>,\n        <DownloadOutlined onClick={handleSave}/>,\n      ]}\n    >일리와 썸네일 제작</NavBar>\n\n    <Preview inputs={inputs} setInputs={setInputs}></Preview>\n    <WhiteSpace size=\"lg\"></WhiteSpace>\n    <InputItem type=\"text\" value={html} placeholder=\"여기에 입력하세요\" onChange={handleText}>텍스트</InputItem>\n    <WhiteSpace size=\"lg\"></WhiteSpace>\n      <SizeSlider inputs={inputs} setInputs={setInputs}></SizeSlider>\n      <WhiteSpace size=\"xl\"></WhiteSpace>\n      <WhiteSpace size=\"xl\"></WhiteSpace>\n      <WingBlank size=\"md\">\n        <Flex>이미지 업로드</Flex>\n\n        <ImageUpload inputs={inputs} setInputs={setInputs} />\n      </WingBlank>\n      <WingBlank size=\"md\">\n        <Flex>배경색 선택</Flex>\n        <WhiteSpace size=\"md\"></WhiteSpace>\n        <Palette inputs={inputs} setInputs={setInputs} />\n      </WingBlank>\n      <PresetMenu  inputs={inputs} setInputs={setInputs}/>\n  </div>\n\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './compass/stylesheets/screen.css';\nimport App from './App_mobile';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}