{"version":3,"sources":["Tutorial.js","End.js","Intro.js","App.js","reportWebVitals.js","index.js"],"names":["Tutorial","history","useState","num","setNum","background","alert","congraturation","transitionToggle","setTransitionToggle","title","body","bgImage","fn","pageNum","showPageNum","maxPageNum","percent","value","setValue","handlechange","e","setTimeout","push","slideChange","pages","console","log","testfn","onClick","test","style","width","height","margin","border","borderRadius","lineHeight","id","sliderArea","useRef","current","slickNext","firework","className","useEffect","ref","dots","infinite","speed","slidesToShow","slidesToScroll","src","backgroundColor","transform","transition","split","map","line","End","Intro","App","path","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f8d03afa.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nimport Slider from \"react-slick\";\r\nimport { useRef } from \"react\";\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\n\r\nconst Tutorial = ({ history }) => {\r\n    const [num, setNum] = useState(1);\r\n    const [transitionToggle, setTransitionToggle] = useState({\r\n        background: false,\r\n        alert: false,\r\n        congraturation: false,\r\n    });\r\n    let newPageNum = 0;\r\n\r\n    const [value, setValue] = useState({\r\n        title: \"\",\r\n        body: \"\",\r\n        bgImage: \"\",\r\n        fn: \"\",\r\n        pageNum: 0,\r\n        showPageNum: 1,\r\n        maxPageNum: 5,\r\n        percent: 0,\r\n    });\r\n    const handlechange = (e) => {\r\n        setNum(num + 1);\r\n        setValue({\r\n            ...value,\r\n            percent: (value.showPageNum * 100) / value.maxPageNum,\r\n        });\r\n\r\n        // 배경화면 어둡게 한 것 제거\r\n        setTransitionToggle({\r\n            ...transitionToggle,\r\n            background: false,\r\n        });\r\n\r\n        // 0.5초 후 congraturation 표시\r\n        setTimeout(() => {\r\n            setTransitionToggle({\r\n                ...transitionToggle,\r\n                background: false,\r\n                congraturation: true,\r\n            });\r\n        }, 500);\r\n\r\n        // 튜토리얼 종료 여부 확인\r\n        if (value.showPageNum === value.maxPageNum) {\r\n            setTimeout(() => { history.push('/end');}, 500)\r\n           \r\n        }\r\n\r\n        //종료가 아닌 경우\r\n        else {\r\n\r\n            setTimeout(() => {\r\n                slideChange();\r\n                setTransitionToggle({\r\n                    ...transitionToggle,\r\n                    background: true,\r\n                    congraturation: false,\r\n                });\r\n                setValue({\r\n                    ...value,\r\n                    title: pages[num].title,\r\n                    body: pages[num].body,\r\n                    fn: pages[num].fn,\r\n                    pageNum: num,\r\n                    showPageNum: num + 1,\r\n                    percent: (value.showPageNum * 100) / value.maxPageNum,\r\n                });\r\n                console.log(value);\r\n            }, 3000);\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n    };\r\n    const testfn = (\r\n        <div onClick={handlechange} test=\"qq\" value=\"tt\" style={{ width: \"calc(100% - 40px)\", height: \"48px\", margin: \"10px 20px\", border: \"1px solid #333\", borderRadius: \"4px\", lineHeight: \"48px\" }}>\r\n            테스트\r\n        </div>\r\n    );\r\n\r\n    // 페이지별 들어가야할 내용 정리\r\n    const pages = [\r\n        {\r\n            id: 1,\r\n            title: \"titleTest1\",\r\n            body: \"테스트바디\\nTest\",\r\n            bgImage: \"\",\r\n            fn: testfn,\r\n        },\r\n        {\r\n            id: 2,\r\n            title: \"titleTest2\",\r\n            body: \"테스트바디2\",\r\n            bgImage: \"\",\r\n            fn: testfn,\r\n        },\r\n        {\r\n            id: 3,\r\n            title: \"titleTest3\",\r\n            body: \"테스트 3번\",\r\n            bgImage: \"\",\r\n        },\r\n        {\r\n            id: 4,\r\n            title: \"titleTest4\",\r\n            body: \"테스트 4번\",\r\n            bgImage: \"\",\r\n        },\r\n        {\r\n            id: 3,\r\n            title: \"titleTest5\",\r\n            body: \"테스트 5번\",\r\n            bgImage: \"\",\r\n        },\r\n    ];\r\n\r\n    const sliderArea = useRef();\r\n    const settings = {\r\n        dots : false,\r\n        infinite: false,\r\n        speed: 500,\r\n        slidesToShow: 1,\r\n        slidesToScroll: 1\r\n    }\r\n\r\n    const slideChange = () => {\r\n        sliderArea.current.slickNext();\r\n    }\r\n\r\n    const firework = (\r\n        <div className=\"after\"></div>\r\n    )\r\n    useEffect(() => {\r\n        setTransitionToggle({\r\n            ...transitionToggle,\r\n            background: true,\r\n            alert: true,\r\n        });\r\n        setValue({\r\n            ...value,\r\n            title: pages[0].title,\r\n            body: pages[0].body,\r\n            fn: pages[0].fn,\r\n        });\r\n        console.log(\"useEFFECT\");\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        console.log(pages, value);\r\n    }, [pages, value]);\r\n\r\n    // const [data, setData] = useState({\r\n    //     pageNum: 0,\r\n    //     maxPageNum: 0\r\n    // })\r\n    // URL query에서 받아온 userType 확인\r\n    // const userType = userTypeArray.find((e) => e.type === query.type);\r\n\r\n    // Type에 맞게 정리된 페이지가 들어갈 배열\r\n    // const pages = [];\r\n\r\n    // useLayoutEffect(() => {\r\n    //     // URL query에서 들어온 값이 유효한 값이라면, type에 맞는 페이지 추출\r\n    //     if (userType !== undefined) {\r\n    //         let pagelist = userType.page;\r\n\r\n    //         pagelist.forEach(i => {\r\n    //             pages.push(pages.find((e) => e.id === i));\r\n\r\n    //         // for (let i = 0; i < pagelist.length; i++) {\r\n    //         //     pages.push(pages.find((e) => e.id === pagelist[i]));\r\n    //         // }\r\n\r\n    //     })\r\n    // }\r\n    // },[]);\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <div className=\"image_wrap\">\r\n                    <Slider ref={sliderArea} {...settings}>\r\n                        <div key={1}><img src=\"./img/test_image.png\" style={{width: \"100%\"}}></img></div>\r\n                        <div key={2}><img src=\"./img/test_image.png\" style={{width: \"100%\"}}></img></div>\r\n                        <div key={3}><img src=\"./img/test_image.png\" style={{width: \"100%\"}}></img></div>\r\n                        <div key={4}><img src=\"./img/test_image.png\" style={{width: \"100%\"}}></img></div>\r\n                        <div key={5}><img src=\"./img/test_image.png\" style={{width: \"100%\"}}></img></div>\r\n                    </Slider>\r\n                    <div className={`actionArea ${transitionToggle.background ? \"toggle\" : \"\"}`}>\r\n                        <div\r\n                            onClick={handlechange}\r\n                            test=\"qq\"\r\n                            value=\"tt\"\r\n                            style={{ width: \"calc(100% - 40px)\", height: \"48px\", margin: \"10px 20px\", border: \"1px solid #333\", borderRadius: \"4px\", lineHeight: \"48px\" }}\r\n                        >\r\n                            테스트\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className={`dim ${transitionToggle.background ? \"toggle\" : \"\"}`}></div>\r\n\r\n                <div className={`alert ${transitionToggle.alert ? \"alerttoggle\" : \"\"}`}>\r\n                    <div className={`congraturation ${transitionToggle.congraturation ? \"congraturationToggle\" : \"\"}`}>\r\n                        <span> {transitionToggle.congraturation ? \"성공\" : \"\"}</span>\r\n                        {transitionToggle.congraturation ? firework : \"\"}\r\n                    </div>\r\n                    <div className=\"title\">\r\n                        {value.title} ({value.pageNum + 1}/{value.maxPageNum})\r\n                    </div>\r\n                    <div className=\"progressBar-root\">\r\n                        <div className=\"progressBar\" style={{ backgroundColor: \"rgb(0,115,240)\", transform: `translateX(${-100 + value.percent}%)`, transition: \"all 0.3s ease-in-out\" }}></div>\r\n                    </div>\r\n                    <div className=\"body\">\r\n                        {value.body.split(\"\\n\").map((line) => {\r\n                            return (\r\n                                <span>\r\n                                    {line}\r\n                                    <br />\r\n                                </span>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                </div>\r\n                {/* <AreaRender pages={pages} maxPageNum={maxPageNum} ></AreaRender> */}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Tutorial;\r\n","const End = () => {\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                header\r\n            </div>\r\n            <div>body</div>\r\n            <div>end button</div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default End","const Intro = () => {\r\n    return (\r\n        <>\r\n            <div>header</div>\r\n            <div>body</div>\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Intro;\r\n","import './App.css';\nimport { Route } from 'react-router-dom';\nimport Tutorial from './Tutorial';\nimport End from './End';\nimport Intro from './Intro';\n\n\nfunction App() {\n\n  return (\n    <div>\n      <Route path=\"/\" exact={true} component={Intro} />\n      <Route path=\"/tutorial\" exact={true} component={Tutorial} />\n      <Route path=\"/end\" component={End} />\n    </div>\n  );\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\n\n\nReactDOM.render(\n\n        <BrowserRouter>\n            <App />\n        </ BrowserRouter>\n,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}